# В списке Primes — 6 элементов, а именно: Primes[0] == 2, Primes[1] == 3, 
# Primes[2] == 5, Primes[3] == 7, Primes[4] == 11, Primes[5] == 13. 
# Список Rainbow состоит из 7 элементов, каждый из которых является строкой. 

Primes = [2, 3, 5, 7, 11, 13]
Rainbow = ['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Indigo', 'Violet']

# В отличие от строк, элементы списка можно изменять, присваивая им новые значения. 

# пусть программа получает на вход количество элементов в списке n, 
# а потом n элементов списка по одному в отдельной строке.

a = []  # заводим пустой список
n = int(input())  # считываем количество элемент в списке
for i in range(n):  
    new_element = int(input())  # считываем очередной элемент
    a.append(new_element)  # добавляем его в список
    # последние две строки можно было заменить одной:
    # a.append(int(input()))
print(a)

# В этом примере создается пустой список, далее считывается количество элементов в списке, 
# затем по одному считываются элементы списка и добавляются в его конец. 
# То же самое можно записать, сэкономив переменную n: 

a = []
for i in range(int(input())):
    a.append(int(input()))
print(a)


# Методы split и join

# на вход подаётся строка
# 1 2 3
s = input()  # s == '1 2 3'
a = s.split()  # a == ['1', '2', '3']

# Обратите внимание, что список будет состоять из строк, а не из чисел. 
# Если хочется получить список именно из чисел, то можно затем элементы списка по одному преобразовать в числа: 

a = input().split()
for i in range(len(a)):
    a[i] = int(a[i])

# то же самое можно сделать в одну строку: 
a = [int(s) for s in input().split()]

# У метода split() есть необязательный параметр, который определяет, 
# какая строка будет использоваться в качестве разделителя между элементами списка. 
# Например, вызов метода split('.') вернет список, полученный разрезанием исходной строки по символам '.':

a = '192.168.0.1'.split('.')
print(a) # ['192', '168', '0', '1']

# В Питоне можно вывести список строк при помощи однострочной команды. Для этого используется метод строки join

a = ['red', 'green', 'blue']
print(' '.join(a))
# вернёт red green blue
print(''.join(a))
# вернёт redgreenblue
print('***'.join(a))
# вернёт red***green***blue

# Вывести элементы списка чисел, разделяя их пробелами, можно так: 

a = [1, 2, 3]
print(' '.join([str(i) for i in a]))
# следующая строка, к сожалению, вызывает ошибку:
# print(' '.join(a))

# Генераторы списков

# Для создания списка, заполненного одинаковыми элементами, 
# можно использовать оператор повторения списка, например: 

n = 5
a = [0] * n
print(a) #[0, 0, 0, 0, 0]

# Для создания списков, заполненных по более сложным формулам можно использовать генераторы: 
# выражения, позволяющие заполнить список некоторой формулой. Общий вид генератора следующий: 

# [выражение for переменная in последовательность]

# где переменная — идентификатор некоторой переменной, последовательность — последовательность значений, 
# который принимает данная переменная (это может быть список, строка или объект, полученный при помощи функции range), 
# выражение — некоторое выражение, как правило, зависящее от использованной в генераторе переменной, 
# которым будут заполнены элементы списка. 

# Создать список, состоящий из n нулей можно и при помощи генератора: 

a = [0 for i in range(5)]

# Создать список, заполненный квадратами целых чисел можно так: 

n = 5
a = [i ** 2 for i in range(n)]

# Если нужно заполнить список квадратами чисел от 1 до n, то можно изменить параметры функции range на range(1, n + 1): 
n = 5
a = [i ** 2 for i in range(1, n + 1)]

# Вот так можно получить список, заполненный случайными числами от 1 до 9 (используя функцию randrange из модуля random): 
from random import randrange
n = 10
a = [randrange(1, 10) for i in range(n)]

